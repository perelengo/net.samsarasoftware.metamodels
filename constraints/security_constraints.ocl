/*-
 * #%L
 * net.samsarasoftware.metamodels
 * %%
 * Copyright (C) 2014 - 2017 Pere Joseph Rodriguez
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 * #L%
 */
import  uml : 'http://www.eclipse.org/uml2/5.0.0/UML' 

package uml


context Element

def: isError(veredict : Boolean) : Boolean = if veredict then null else true endif
def: isWarning(veredict : Boolean) : Boolean = if veredict then false else true endif



def: getUpperBound(property : Property) : String = if(property.upperValue.oclIsUndefined())then  '1' else property.upperValue.stringValue() endif 

def: getContainingUseCases(useCases:Set(Element)):Set(UseCase)=
	useCases->collect(elem  | 
	if( not(elem.owner.oclIsUndefined()) ) then
		if(elem.owner.oclIsTypeOf(UseCase)) then  
			Set{elem.owner.oclAsType(UseCase)}
		else
			getContainingUseCases( Set{elem.owner} )->collect(g | g.oclAsType(UseCase))->asSet()
		endif
	else
		let s:Set(UseCase)=Set{} in s
	endif
	)->asSet()

def: getExtendedCases(useCases: Set(UseCase)):Set(UseCase)= uml::Extend.allInstances()->select(e | useCases->includes(e.extension))->collect(e | e.extendedCase)->asSet()

def: getIncludingCases(useCases: Set(UseCase)):Set(UseCase)= uml::Include.allInstances()->select(e | useCases->includes(e.addition))->collect(e| e.includingCase)->asSet()

def: getGeneralsUseCases(classifiers: Set(UseCase)):Set(UseCase)= uml::Generalization.allInstances()->select(g | classifiers->includes(g.specific) and g.general.oclIsTypeOf(UseCase))->collect(g | g.general.oclAsType(UseCase))->asSet()

def: getUsageClientsUseCases(namedElements: Set(UseCase)):Set(UseCase)= uml::Usage.allInstances()->select(g | namedElements->includes(g.supplier))->collect(u | u.client->select(c | c.oclIsTypeOf(UseCase))->collect(e | e.oclAsType(UseCase)))->asSet()




def: getSourcePath( useCases : Set(UseCase) ) : Set(UseCase)=
if(useCases->isEmpty())then 
	useCases
else
	let newCases:Set(UseCase)=getExtendedCases(useCases)
		->union(
			getIncludingCases(useCases)
		)->union(
			getGeneralsUseCases(useCases)
		)->union(
			getUsageClientsUseCases(useCases)
		)->asSet() in
	getSourcePath2(
		useCases,
		newCases,
		useCases

	)
endif

def: getSourcePath2( useCases : Set(UseCase) , newCases : Set(UseCase) , alreadyVisited:Set(UseCase)) : Set(UseCase)=
if(newCases->isEmpty())then 
	alreadyVisited
else
	let newCases2:Set(UseCase)=getExtendedCases(newCases)
		->union(
			getIncludingCases(newCases)
		)->union(
			getGeneralsUseCases(newCases)
		)->union(
			getUsageClientsUseCases(newCases)
		)->excludingAll(alreadyVisited)->excludingAll(newCases)->asSet() in
	getSourcePath2(
		useCases,
		newCases2,
		alreadyVisited->union(newCases)
	)
endif

def: getActorsHierarchy( actors: Set(Actor) ) : Set(Actor) =
let parents:Set(Actor)=actors->collect(a | a.generalization->select(g | g.general.oclIsTypeOf(Actor))->collect(g | g.general.oclAsType(Actor)))->asSet() in
if(parents->size()=0) then
	actors
else
	getActorsHierarchy2(parents, actors->union(parents))
endif

def: getActorsHierarchy2( actors: Set(Actor), actorsParents : Set(Actor) ) : Set(Actor) =
let parents:Set(Actor)=actors->collect(a | a.generalization->select(g | g.general.oclIsTypeOf(Actor))->collect(g | g.general.oclAsType(Actor)))->asSet() in
if(parents->size()=0) then
	actorsParents
else
	getActorsHierarchy2(parents, actors->union(actorsParents)->union(parents))
endif

  def: getUseCasesActors( useCases : Set(UseCase)  ) : Set(Actor)=
let useCaseActors : Set(Actor) = Association.allInstances()->select(a | a.memberEnd->select(e| useCases->includes(e.type))->size()>0)->collect(a| a.memberEnd->select(e| e.type.oclIsTypeOf(Actor)))->collect(e | e.type.oclAsType(Actor))->asSet()
 in
getActorsHierarchy(useCaseActors) 


def: joinStrings(string : Collection(String), separator:String ):String =
if(string->size()=0) then '' else
if(string->size()=1) then 
	string->asSequence()->at(1)
else
	let seq:Sequence(String) = string->asSequence() in
	let rem:Collection(String)=string->excludingAll(Sequence{seq->at(1),seq->at(2)}) in
	joinStrings(Sequence{seq->at(1)+separator+seq->at(2)}->union(rem),separator)
endif
endif

context UseCase

/*
Si es un included, extends, o usage y el caso de uso origen o sus superUseCases y respectivos tienen una asociacion de tipo security y ?ste no
lanzamos un error porque no se tendr?n permisos para ejecutar.
*/
inv UseCaseNotAssociatedToPathActors (let sourcePath:Set(UseCase)=	getSourcePath(	Set{self}	) in
let useCasesActors:Set(Actor)=	getUseCasesActors(	Set{self}			) in
let actorsInPath:Set(Actor)=	getUseCasesActors(	sourcePath	) in
'UseCase is not associated to same actors that those involved in its reachable path ( useCase actors: '+
joinStrings(useCasesActors->collect(s| s.name),', ') +') ( reachablePath actors: '+joinStrings(actorsInPath->collect(s| s.name),', ')+') #reacheablePath:# '+joinStrings(sourcePath->collect(s| s.name),', ')
): isError( 
	if(self.getAppliedStereotypes()->reject(s | s.qualifiedName.startsWith('interface::'))->size()>0) then
let sourcePath:Set(UseCase)=	getSourcePath(	Set{self}	) in
let useCasesActors:Set(Actor)=	getUseCasesActors(	Set{self}			) in
let actorsInPath:Set(Actor)=	getUseCasesActors(	sourcePath	) in
	let notIncluded:Boolean=actorsInPath->intersection(useCasesActors)->isEmpty() in
	let notIncluded:Boolean=actorsInPath->intersection(useCasesActors)->isEmpty() in

	notIncluded 	
	and 
	(  
		if(
			((useCasesActors->isEmpty() xor actorsInPath->isEmpty()))
		)then
				 useCasesActors->isEmpty()
		else
			(not(useCasesActors->isEmpty() and actorsInPath->isEmpty()))
		endif
	 	 		
	)
	else
		false
	endif
)
	
inv UseCaseDoesNotDefineSecurity('Use case has no actor associated'):isError(	
	if(self.getAppliedStereotypes()->reject(s | s.qualifiedName.startsWith('interface::'))->size()>0) then
		getUseCasesActors(	Set{self})->isEmpty()
	else
		false
	endif
)

inv ParentUseCaseMayHaveAssociatedItsChildUseCaseActors(
let sourcePath:Set(UseCase)=	getSourcePath(	Set{self}	) in
let useCasesActors:Set(Actor)=	getUseCasesActors(	Set{self}			) in
let actorsInPath:Set(Actor)=	getUseCasesActors(	self->collect(u | u.allOwnedElements()->select(e | e.oclIsTypeOf(UseCase))->collect(u | u.oclAsType(UseCase)))->asSet()	) in
let pendingActors:Set(Actor)=  actorsInPath->excludingAll(useCasesActors->intersection(actorsInPath)) in 
'Child use cases actors may be associated to this UseCase: '+joinStrings(pendingActors->collect(a | a.name),',')):isError(

let sourcePath:Set(UseCase)=	getSourcePath(	Set{self}	) in
let useCasesActors:Set(Actor)=	getUseCasesActors(	Set{self}			) in
let actorsInPath:Set(Actor)=	getUseCasesActors(	self->collect(u | u.allOwnedElements()->select(e | e.oclIsTypeOf(UseCase))->collect(u | u.oclAsType(UseCase)))->asSet()	) in
useCasesActors->intersection(actorsInPath)->size()<actorsInPath->size()
)

endpackage
